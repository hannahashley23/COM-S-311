package P11420;

import java.util.Arrays;
import java.util.Scanner;

public class Test {

	static long[][][] dp;

	public static void findWays(int n, int s) {

		if(n < s) {
			dp[n][s][0] = 0;
			dp[n][s][1] = 0;
		}
		else if(n == 0){
			dp[n][s][0] = 0;
			dp[n][s][1] = 0;
		}
		else if(n == s) {
			dp[n][s][0] = 0;
			dp[n][s][1] = 1;
		}
		else if(s == n-1) {
			dp[n][s][0] = 1;
			dp[n][s][1] = 0;
		}
		
		else if(s == 0) {
			dp[n][s][0] = dp[n-1][s][0] + dp[n-1][s][1];
			dp[n][s][1] = dp[n-1][s][0];
		}
		else {
			dp[n][s][0] = dp[n-1][s][0] + dp[n-1][s][1];
			dp[n][s][1] = dp[n-1][s-1][1] + dp[n-1][s][0];
		}
	}
	
	public static void createDP()
	{
		dp = new long[66][66][2];
		for (int i = 0; i < 66; i++) {
			for(int j = 0; j < 66; j++) {
				findWays(i, j);
			}
		}
	}
	
	public static void main(String[] args) {
		
		createDP();

		Scanner scnr = new Scanner(System.in);

		while (scnr.hasNextLine()) {
			int n = scnr.nextInt();
			int s = scnr.nextInt();

			if (n < 1) {
				break;
			}

			else {
				System.out.println(dp[n][s][0] + dp[n][s][1]);
			}
		}
		scnr.close();
	}
}
